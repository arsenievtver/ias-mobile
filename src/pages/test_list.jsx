import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { FaHome } from "react-icons/fa";
import useApi from "../hooks/useApi.hook";
import { TestListGetUrl } from "../helpers/constants";
import "./test_list.css";

const TestList = () => {
	const location = useLocation();
	const navigate = useNavigate();
	const { instructionId, title } = location.state || {};

	const api = useApi();
	const [tests, setTests] = useState([]);
	const [loading, setLoading] = useState(true);

	const fetchTests = async () => {
		if (!instructionId) return;
		setLoading(true);
		try {
			const res = await api.get(TestListGetUrl(instructionId));
			const data = res.data?.data || [];
			setTests(data);
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤:", err);
			setTests([]);
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		fetchTests();
	}, [instructionId]);

	const handleTestClick = (test) => {
		if (!test?.id) return;
		navigate("/test", { state: { testId: test.id, instructionTitle: title } });
	};

	return (
		<div className="testlist-container">
			<FaHome className="home-icon" onClick={() => navigate("/lk")} />
			<div className="testlist-header">
				<h2>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–µ—Å—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h2>
				<p className="instruction-title">üìÑ {title}</p>
			</div>

			{loading ? (
				<p className="testlist-loading">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã...</p>
			) : tests.length > 0 ? (
				<div className="tests-grid">
					{tests.map((test) => {
						// –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é
						const lastHistory = test.histories?.length
							? [...test.histories].sort(
								(a, b) => new Date(b.date) - new Date(a.date)
							)[0]
							: null;

						return (
							<div
								key={test.id}
								className="test-card"
								onClick={() => handleTestClick(test)}
							>
								<h3>{test.title}</h3>

								{lastHistory ? (
									<div className="test-history">
										<p>
											–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ:{" "}
											{new Date(lastHistory.date).toLocaleDateString()}
										</p>
										<p>
											–†–µ–∑—É–ª—å—Ç–∞—Ç:{" "}
											{lastHistory.additional_data?.passed
												? "‚úÖ –ü—Ä–æ–π–¥–µ–Ω"
												: "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"}
										</p>
										<p>
											–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:{" "}
											{lastHistory.additional_data?.success_rate ?? "‚Äî"}%
										</p>
									</div>
								) : (
									<p className="no-history">–¢–µ—Å—Ç –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª—Å—è</p>
								)}
							</div>
						);
					})}
				</div>
			) : (
				<p>–¢–µ—Å—Ç–æ–≤ –Ω–µ—Ç.</p>
			)}
		</div>
	);
};

export default TestList;
