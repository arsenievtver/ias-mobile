import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import useApi from "../hooks/useApi.hook"; // —Ç–≤–æ–π —Ö—É–∫
import { ModulesGetUrl, ModulesUpdatePostUrl } from "../helpers/constants";
import PdfModal from "../components/Pdfviewer/PdfModal";
import { FaHome } from "react-icons/fa";
import './education.css'

const Education = () => {
	const location = useLocation();
	const navigate = useNavigate();
	const [loading, setLoading] = useState(true); // –Ω–æ–≤—ã–π state
	const { instructionId, title } = location.state || {};
	const api = useApi();

	const [modules, setModules] = useState([]);
	const [isOpenList, setIsOpenList] = useState(true);
	const [modalUrl, setModalUrl] = useState(null);
	const [modalOpen, setModalOpen] = useState(false);
	const [selectedModuleId, setSelectedModuleId] = useState(null);

	// –í—ã–Ω–æ—Å–∏–º fetchModules –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
	const fetchModules = async () => {
		if (!instructionId) return;
		setLoading(true); // –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
		try {
			const res = await api.get(ModulesGetUrl(instructionId));
			let data = res.data;
			if (!Array.isArray(data)) data = data ? [data] : [];
			setModules(data);
			console.log("üì¶ modules:", data);
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:", err);
			setModules([]); // –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
		} finally {
			setLoading(false); // –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞
		}
	};

	useEffect(() => {
		fetchModules();
	}, [instructionId]);

	const openModule = (url, moduleId) => {
		setModalUrl(url);
		setSelectedModuleId(moduleId);
		setModalOpen(true);
	};

	const closeModal = () => {
		setModalUrl(null);
		setSelectedModuleId(null);
		setModalOpen(false);
	};

	const markModuleCompleted = async () => {
		if (!selectedModuleId) return;
		try {
			await api.post(ModulesUpdatePostUrl(selectedModuleId), {});
			alert("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω");
			closeModal();
			fetchModules();
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è:", err);
			alert("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		}
	};

	return (
		<div className="education-container">
			<FaHome className="home-icon" onClick={() => navigate("/lk")} />
			<div className="edu-header">
				<h2>{title || "–û–±—É—á–µ–Ω–∏–µ"}</h2>
			</div>

			<div className="modules-block">
				<div className="modules-header" onClick={() => setIsOpenList(!isOpenList)}>
					–ú–æ–¥—É–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è {isOpenList ? "‚ñ≤" : "‚ñº"}
				</div>

				{isOpenList && (
					<ul className="modules-list">
						{loading ? (
							<p className="modules-loading">–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –æ–±—É—á–µ–Ω–∏—è...</p>
						) : modules.length > 0 ? (
							modules.map((mod) => (
								<li
									key={mod.module_id}
									className="module-item"
									onClick={() => openModule(mod.module_link, mod.module_id)}
								>
					<span className="module-left">
						{mod.module_order_index ?? "?"}. {mod.module_title}
					</span>
									{mod.is_completed ? (
										<span className="module-check">‚úÖ</span>
									) : (
										<span className="module-failed">–Ω–µ –ø—Ä–æ–π–¥–µ–Ω</span>
									)}
								</li>
							))
						) : (
							<p className="no-modules">–ú–æ–¥—É–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
						)}
					</ul>
				)}
			</div>

			{/* –ú–æ–¥–∞–ª–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π */}
			<PdfModal
				isOpen={modalOpen}
				onClose={closeModal}
				url={modalUrl}
				actionButton={
					!modules.find(m => m.module_id === selectedModuleId)?.is_completed && (
						<button className="actionBtn" onClick={markModuleCompleted}>
							–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω
						</button>
					)
				}
			/>
		</div>
	);
};

export default Education;
